---
- name: Create container node instance(s) in Zone A
  when: node_count_zone_a is defined
  local_action:
    module: ec2
    key_name: "{{ key_name }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ subnet_id_a }}"
    volumes: "{{ node_volumes }}"
    wait: no
    monitoring: no
    assign_public_ip: yes
    group_id: 
      - "{{ outboundtraffic_group.group_id }}"
      - "{{ druid_cluster_group.group_id }}"
      - "{{ druid_cluster_internode_group.group_id }}"
    instance_tags:
      Name: "druid-cluster-node"
    count_tag:
      Name: "druid-cluster-node"
    exact_count: "{{ node_count_zone_a }}"
  register: container_nodes_zonea

- name: Create container node instance(s) in Zone B
  when: node_count_zone_b is defined
  local_action:
    module: ec2
    key_name: "{{ key_name }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ subnet_id_b }}"
    volumes: "{{ node_volumes }}"
    wait: no
    monitoring: no
    assign_public_ip: yes
    group_id: 
      - "{{ outboundtraffic_group.group_id }}"
      - "{{ druid_cluster_group.group_id }}"
      - "{{ druid_cluster_internode_group.group_id }}"
    instance_tags:
      Name: "druid-cluster-node"
    count_tag:
      Name: "druid-cluster-node"
    exact_count: "{{ node_count_zone_b }}"
  register: container_nodes_zoneb

- name: Create container node instance(s) in Zone C
  when: node_count_zone_c is defined
  local_action:
    module: ec2
    key_name: "{{ key_name }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ subnet_id_c }}"
    volumes: "{{ node_volumes }}"
    wait: no
    monitoring: no
    assign_public_ip: yes
    group_id: 
      - "{{ outboundtraffic_group.group_id }}"
      - "{{ druid_cluster_group.group_id }}"
      - "{{ druid_cluster_internode_group.group_id }}"
    instance_tags:
      Name: "druid-cluster-node"
    count_tag:
      Name: "druid-cluster-node"
    exact_count: "{{ node_count_zone_c }}"
  register: container_nodes_zonec

- name: Set container variables
  set_fact:
    containers_zonea: "{{container_nodes_zonea.tagged_instances if 'tagged_instances' in container_nodes_zonea else None}}"
    containers_zoneb: "{{container_nodes_zoneb.tagged_instances if 'tagged_instances' in container_nodes_zoneb else None}}"
    containers_zonec: "{{container_nodes_zonec.tagged_instances if 'tagged_instances' in container_nodes_zonec else None}}"

- name: Set all node container variables
  set_fact:
    all_nodes: "{{ containers_zonea | union(containers_zoneb) | union(containers_zonec) }}"
  when: all_nodes is undefined

- name: debug all nodes
  debug: var=all_nodes verbosity=1

- name: Set all node container ids
  set_fact:
    all_node_ids: "{{ all_nodes | map(attribute='id') | list }}"
  when: all_node_ids is undefined

- name: Gather hosts matching master tags.
  ec2_instance_facts:
    filters:
      instance-state-name: running
      "tag:postgres": master
    region: "{{ region }}"
  register: tagged_as_master_nodes

- name: Set tagged as master node variable
  set_fact:
    tagged_as_master_node: "{{ tagged_as_master_nodes.instances | map(attribute='instance_id') | list }}"

- name: Set master node container variables
  set_fact:
    master_node: "{{ all_node_ids | random }}"
  when: master_node is undefined and (tagged_as_master_node is undefined or tagged_as_master_node|length == 0)

- name: Set master node container variables
  set_fact:
    master_node: "{{ tagged_as_master_node[0] }}"
  when: master_node is undefined and tagged_as_master_node|length > 0

- name: tag node to be the master
  ec2_tag:
    region: "{{ region }}"
    resource: "{{ item }}"
    state: present
    tags:
      zookeeper: master
      postgres: master
  with_items:
    - "{{ master_node }}"

- name: Gather hosts matching broker tags.
  ec2_instance_facts:
    filters:
      instance-state-name: running
      "tag:druid": broker
    region: "{{ region }}"
  register: tagged_as_broker_nodes

- name: Set tagged as broker node variable
  set_fact:
    tagged_as_broker_node: "{{ tagged_as_broker_nodes.instances | map(attribute='instance_id') | list }}"

- name: Set broker node container variables
  set_fact:
    broker_nodes: "{{ all_node_ids | difference(master_node) | random }}"
  when: broker_nodes is undefined and (tagged_as_broker_node is undefined or tagged_as_broker_node|length == 0)

- name: Set broker node container variables
  set_fact:
    broker_nodes: "{{ tagged_as_broker_node }}"
  when: broker_nodes is undefined and tagged_as_broker_node|length > 0

- name: tag nodes to be the broker
  ec2_tag:
    region: "{{ region }}"
    resource: "{{ item }}"
    state: present
    tags:
      druid: broker
  with_items:
    - "{{ broker_nodes }}"

- name: Gather hosts matching middlemanager tags.
  ec2_instance_facts:
    filters:
      instance-state-name: running
      "tag:druid": middlemanager
    region: "{{ region }}"
  register: tagged_as_middlemanager_nodes

- name: Set tagged as middlemanager node variable
  set_fact:
    tagged_as_middlemanager_node: "{{ tagged_as_middlemanager_nodes.instances | map(attribute='instance_id') | list }}"

- name: Set middlemanager node container variables
  set_fact:
    middlemanager_nodes: "{{ all_node_ids | difference(master_node) | difference(broker_nodes) | random }}"
  when: middlemanager_nodes is undefined and (tagged_as_middlemanager_node is undefined or tagged_as_middlemanager_node|length == 0)

- name: Set middlemanager node container variables
  set_fact:
    middlemanager_nodes: "{{ tagged_as_middlemanager_node }}"
  when: middlemanager_nodes is undefined and tagged_as_middlemanager_node|length > 0

- name: tag node to be the middlemanagers
  ec2_tag:
    region: "{{ region }}"
    resource: "{{ item }}"
    state: present
    tags:
      druid: middlemanager
  with_items:
    - "{{ middlemanager_nodes }}"

- name: Gather hosts matching coordinator tags.
  ec2_instance_facts:
    filters:
      instance-state-name: running
      "tag:druid": coordinator
    region: "{{ region }}"
  register: tagged_as_coordinator_nodes

- name: Set tagged as coordinator node variable
  set_fact:
    tagged_as_coordinator_node: "{{ tagged_as_coordinator_nodes.instances | map(attribute='instance_id') | list }}"

- name: Set coordinator node container variables
  set_fact:
    coordinator_nodes: "{{ all_node_ids | difference(master_node) | difference(broker_nodes) | difference(middlemanager_nodes) | random }}"
  when: coordinator_nodes is undefined and (tagged_as_coordinator_node is undefined or tagged_as_coordinator_node|length == 0)

- name: Set coordinator node container variables
  set_fact:
    coordinator_nodes: "{{ tagged_as_coordinator_node }}"
  when: coordinator_nodes is undefined and tagged_as_coordinator_node|length > 0

- name: tag node to be the coordinators
  ec2_tag:
    region: "{{ region }}"
    resource: "{{ item }}"
    state: present
    tags:
      druid: coordinator
  with_items:
    - "{{ coordinator_nodes }}"

- name: Gather hosts matching metric master tags.
  ec2_instance_facts:
    filters:
      instance-state-name: running
      "tag:metrics": master
    region: "{{ region }}"
  register: tagged_as_metric_nodes

- name: Set tagged as metric node variable
  set_fact:
    tagged_as_metric_node: "{{ tagged_as_metric_nodes.instances | map(attribute='instance_id') | list }}"

- name: Set metrics node container variables
  set_fact:
    metrics_nodes: "{{ all_node_ids | difference(master_node) | difference(broker_nodes) | difference(middlemanager_nodes) | difference(coordinator_nodes) | random }}"
  when: metrics_nodes is undefined and (tagged_as_metric_node is undefined or tagged_as_metric_node|length == 0)

- name: Set metrics node container variables
  set_fact:
    metrics_nodes: "{{ tagged_as_metric_node }}"
  when: metrics_nodes is undefined and tagged_as_metric_node|length > 0

- name: tag node to be the metrics master node
  ec2_tag:
    region: "{{ region }}"
    resource: "{{ item }}"
    state: present
    tags:
      metrics: master
  with_items:
    - "{{ metrics_nodes }}"

- name: Gather hosts matching historical tags.
  ec2_instance_facts:
    filters:
      instance-state-name: running
      "tag:druid": historical
    region: "{{ region }}"
  register: tagged_as_historical_nodes

- name: Set tagged as historical node variable
  set_fact:
    tagged_as_historical_node: "{{ tagged_as_historical_nodes.instances | map(attribute='instance_id') | list }}"

- name: Set historical node container variables
  set_fact:
    historical_nodes: "{{ all_node_ids | difference(master_node) | difference(broker_nodes) | difference(middlemanager_nodes) | difference(coordinator_nodes) | difference(metrics_nodes) }}"
  when: historical_nodes is undefined and (tagged_as_historical_node is undefined or tagged_as_historical_node|length == 0)

- name: Set historical node container variables
  set_fact:
    historical_nodes: "{{ tagged_as_historical_node }}"
  when: historical_nodes is undefined and tagged_as_historical_node|length > 0

- name: tag node to be a historical
  ec2_tag:
    region: "{{ region }}"
    resource: "{{ item }}"
    state: present
    tags:
      druid: historical
  with_items:
    - "{{ historical_nodes }}"

- name: Wait for SSH on nodes
  when: '"public_ip" in item.1'
  wait_for: host={{ item.1.public_ip }} delay=5 port=22 state=started
  with_indexed_items:
    - "{{ all_nodes }}"



